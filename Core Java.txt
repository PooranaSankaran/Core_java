Core Java

1.) Variables

public class hello {

	public static void main(String[] args) {
		System.out.print(3+5);
		System.out.print(8+7);
		
		//int num1=3;
		//int num2=5;
		//System.out.println(num1+num2);
		
		int num1=3;
		int num2=5;
		int result=num1+num2;
		System.out.println(result);
	}
}
------------------------------------------------------------------------------------------------------------------------
2.) datatypes

public class hello {

	public static void main(String[] args) {
		int num1=9;
		byte by=127;
		short sh=558;
		long l=5854l;
		
		float f=5.8f;
		double d=5.8;
		
		char c='k';
		
		boolean b=true;

	}

}
-------------------------------------------------------------------------------------------------------------------------
Type conversions

public class hello {

	public static void main(String[] args) {
		byte b=127;
		int a=b;
		System.out.println(b);
		System.out.println(a);
		
		byte b1=125;
		int a0=b1;
		System.out.println(b1);
		System.out.println(a0);
		
		int aa=257;
		byte k=(byte)aa;
		
		float f=5.6f;
		int t=(int)f;
		
		int a2=2567;
		byte b2=(byte)a;
		System.out.println(k);
		
		byte a3=10;
		byte b4=20;
		int t=a*b;
		System.out.println(t);
	
	}

}

-------------------------------------------------------------------------------------------------------------------------
Logical operations 

public class hello {

	public static void main(String[] args) {
		int x=7;
		int y=5;
		int a=5;
		int b=9;
		
//		boolean result= x>y && a<b ;
//		boolean result= x>y || a<b ;
//		boolean result= x>y && a>b ;
//		boolean result= x>y || a>b ;
//		boolean result= x<y && a<b ;
//		boolean result= x<y || a<b ;
//		boolean result= x<y || a<b || a>1 ;
		
//		System.out.println(result);
		
		boolean result= a>b ;
		System.out.println(!result);
		
	}

}

-------------------------------------------------------------------------------------------------------------------------
assigmanet operations

public class hello {

	public static void main(String[] args) {
/**		int num1=7;
		int num2=5;
		int result=num1+num2;
		System.out.println(result);
**/	
		
/**
		int num1=7;
		int num2=5;
		int result=num1-num2;
		System.out.println(result);
**/
		
/**		
		int num1=7;
		int num2=5;
		int result=num1*num2;
		System.out.println(result);
**/
		
/**
		int num1=7;
		int num2=5;
		int result=num1/num2;
		System.out.println(result);
**/
		
/**
		int num1=7;
		int num2=5;
		int result=num1%num2;
		System.out.println(result);
**/
		
		int num=7;
//		num=num+2;
//		num+=2;
//		num*=2;
		
		num++;    //post increment
		++num;    //pre increment
		num--;    //post decrement
		--num;	  //pre decrement
		System.out.println(num);
		
		int result=num++; //fetch the value and then increment
		System.out.println(result);		
	
	}

}
-------------------------------------------------------------------------------------------------------------------------
Relational Operations

public class hello {

	public static void main(String[] args) {
		int x=6;
		int y=5;
//		boolean result= x<y;
//		boolean result= x>y;
//		boolean result= x>=y;
//		boolean result= x<=y;
//		boolean result= x!=y;
		boolean result= x==y;
		System.out.println(result);
		
		double a=8.8;
		double b=9.8;
//		boolean res = a<=b;		
		boolean res = a>=b;
	
		System.out.println(res);
	}

}
--------------------------------------------------------------------------------------------------------------------------
if else 

public class hello {

	public static void main(String[] args) {
//		int x=8;
//		System.out.println("Hello");
//		System.out.println("Bye");
		
//		int x=18;
//		if(x>10) {
//			System.out.println("Hello");
//		}
		
//		if(true) {
//			System.out.println("Hello");
//		}
		
//		int x=28;
//		if(x>10 && x<=20) {       //11-20
//			System.out.println("Hello");
//		}
//		System.out.println("Bye");
		
//		int x=28;
//		if(x>10 && x<=20) {       //11-20
//			System.out.println("Hello");
//		}
//		else
//		System.out.println("Bye");
		
		int x=8;
		int y=7;
		if(x>y) {
			System.out.println(x);
			System.out.println("Thankyou");
		}
		else
			System.out.println(y);		
	}

}
--------------------------------------------------------------------------------------------------------------------------
Switch statement

public class hello {

	public static void main(String[] args) {
//		int n=1;
//		if(n==1)
//			System.out.println("Monday");
//		else if(n==2)
//			System.out.println("Tuesday");
//		else if(n==3)
//		System.out.println("Wednesday");
//		else if(n==4)
//		System.out.println("Thursday");
//		else if(n==5)
//		System.out.println("Friday");
//		else if(n==6)
//		System.out.println("Saturday");
//		else
//		System.out.println("Sunday");
		
		int n=8;
		switch(n) {
		case 1:
			System.out.println("Monday");
			break;
		case 2:
			System.out.println("Tuesday");
			break;
		case 3:
		System.out.println("Wednesday");
			break;
		case 4:
		System.out.println("Thursday");
			break;
		case 5:
		System.out.println("Friday");
			break;
		case 6:
		System.out.println("Saturday");
			break;
		case 7:
		System.out.println("Sunday");
			break;
		default:
			System.out.println("Enter a valid number");			
		}
		
	}
}


--------------------------------------------------------------------------------------------------------------------------
For loop

public class hello {

	public static void main(String[] args) {
		for(int i=0;i<=4;i++)
		{
			System.out.println("Hi"+i);
		}
		
		
		for(int i=1;i<=7;i++)
		{
			System.out.println("Day"+i);
			for(int j=1;j<=9;j++)
			{
				System.out.println(" "+(j+8)+"-"+(j+9));
			}
		}
		
		
		int i=1;
		for(;i<=5;)
		{
			System.out.println("DAY"+i);
			i++;
		}
	}
}

--------------------------------------------------------------------------------------------------------------------------
while lopps
public class hello {

	public static void main(String[] args) {
		int i=1;
		
//		while(true)
//		{
//			System.out.println("Hi"+ i);
//			i++;
//		}
		
		
//		while(i<=4)
//		{
//			System.out.println("Hi"+ i);
//			i++;
//		}
//		System.out.println("Bye"+i);

		
		while(i<=4)
		{
			System.out.println("Hi"+ i);
			int j=1;
			while(j<=3) {
				System.out.println("Hello"+j);
				j++;
			}
			i++;
		}
		System.out.println("Bye"+i);
	}
}
--------------------------------------------------------------------------------------------------------------------------
Do while loops

public class hello {

	public static void main(String[] args) {
		int i=1;
		do
		{
			System.out.println("Hi"+i);
			i++;
		}
		while(i<=4);
	}
}

--------------------------------------------------------------------------------------------------------------------------
Class and Object

class Calculator{
	public int add(int n1, int n2)
	{
		//int a;
		//System.out.println("in add");
		//return 0;

		//int r=num1+num2;
		//return r;

		int r=n1+n2;
		return r;
	}
}

class Demo
{
	public static void main(String[] args) 
	{
		int num1=4;
		int num2=5;
		Calculator calc= new Calculator();
		int result=calc.add(4,5);
		//calc.add();
		//int result=calc.add();
		//int result=num1+num2;
		System.out.println(result);
		
	}
}

// Object Oriented programming
// Object - Properties and Beahaviors

//Class


--------------------------------------------------------------------------------------------------------------------------
Methods

package classDemo;
/**
class Calculator{
	int a;
	public int add(int n1, int n2)
	{
		int r=n1+n2;
		return r;
	}
}

public class Demo {

	public static void main(String[] args) {
		int num1=4;
		int num2=5;
		Calculator calc= new Calculator();
		int result = calc.add(num1,num2);
		System.out.println(result);
	}
}
	**/

class Computer
{
	public void playMusic()
	{
		System.out.println("Music Playing...");
	}
	public String getMeAPen(int cost)
	{
		if(cost>=10)
			return "Pen";
		else
			return "Nothing";
	}
}


public class Demo {
	public static void main(String[] args) {
		Computer obj=new Computer();
		obj.playMusic();
		String src=obj.getMeAPen(10);
		System.out.println(src);
	}
}

--------------------------------------------------------------------------------------------------------------------------
array 

int i=5;
int j=6;
int k=7;
int num[]= {5,6,7};
int num[]=new int[4];
--------------------------------------------------------------------------------------------------------------------------
Getters and setters

class Human
{
	//int age;
	//private int age=11;
	private int age;
	//String name;
	//private String name="Navin";
	private String name;
	
	public int getAge()
	{
		return age;
	}
	public void SetAge(int age)
	{
		this.age=age;
	}
	
//	public void SetAge(int a)
//	{
//		age=a;
//	}
	
//	public int abc()
//	{
//		return age;
//	}
//	public void xyz(int a)
//	{
//		age=a;
//	}
	
	
	public String getName()
	{
		return name;
	}
	public void setName(String name)
	{
		this.name=name;
	}
	
//	public void setName(String n)
//	{
//		name=n;
//	}
}

public class Demo {
	public static void main(String[] args) throws ClassNotFoundException
	{
		Human obj=new Human();
//		obj.xyz(30);
		obj.SetAge(30);
		obj.setName("Reddy");
//		obj.age=11;
//		obj.name="Navin";
		
//		System.out.println(obj.abc()+" : "+obj.getAge());
		System.out.println(obj.getName()+" : "+obj.getAge());
	
	}
}
--------------------------------------------------------------------------------------------------------------------------
Constructors

class Human
{
	private int age;
	private String name;
	
	public Human()
	{
		age=12;
		name="John";
		//System.out.println("in constructor");
	}
	public int getAge(){
		return age;
	}
	public void SetAge(int age)
	{
		this.age=age;
	}
	
	
	public String getName()
	{
		return name;
	}
	public void setName(String name)
	{
		this.name=name;
	}
}

public class Demo {
	public static void main(String[] args) throws ClassNotFoundException
	{
		Human obj=new Human();
		Human obj1=new Human();
		System.out.println(obj.getName()+" : "+obj.getAge());
		
		obj.SetAge(30);
		obj.setName("Reddy");
		

		//System.out.println(obj.getName()+" : "+obj.getAge());
	}
}



--------------------------------------------------------------------------------------------------------------------------
Inheritances

class Calc
{
	public int add(int n1, int n2)
	{
		return n1+n2;
	}
	public int sub(int n1, int n2)
	{
		return n1-n2;
	}
}


public class AdvCalc extends Calc
{
	public int multi(int n1, int n2)
	{
		return n1*n2;
	}
	public int div(int n1, int n2)
	{
		return n1/n2;
	}
}


public class Demo
{
	public static void main(String a[]) 
	{
//		Calc obj=new Calc();
		AdvCalc obj=new AdvCalc();
		int r1=obj.add(4, 5);
		int r2=obj.sub(7,3);
		int r3=obj.multi(5,3);
		int r4=obj.div(15,4);
		
		System.out.println(r1+" "+r2);
		
	}
}
--------------------------------------------------------------------------------------------------------------------------
Encapsulation

class Human
{
	//int age;
	//private int age=11;
	private int age;
	//String name;
	//private String name="Navin";
	private String name;
	
	public int getAge()
	{
		return age;
	}
	public void SetAge(int a)
	{
		age=a;
	}
	
	
	public String getName()
	{
		return name;
	}
	public void setName(String n)
	{
		name=n;
	}
}

public class Demo {
	public static void main(String[] args) throws ClassNotFoundException
	{
		Human obj=new Human();
		obj.SetAge(30);
		obj.setName("Reddy");
//		obj.age=11;
//		obj.name="Navin";
		
		System.out.println(obj.getName()+" : "+obj.getAge());
	
	}
}

--------------------------------------------------------------------------------------------------------------------------
Polymorphism

Polymorphism:
- Many behaviour ( same object or reference has differnet behaviours)

1. Compile time polymorhism -- Overloading
	add(int, int)
	add(int, int, int)

2. Run time polymorphism -- Overriding
	A
		add(int,int)
	B
		add(int, int)

--------------------------------------------------------------------------------------------------------------------------
try and final

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Demo {
    public static void main(String[] args) throws NumberFormatException {   
    	
    	int i=0;
    	int j=0;
    	try
    	{
    		j=18/i;
    		
    	}
    	catch(Exception e)
    	{
    		System.out.println("Someting went wrong.");
    		System.out.println("Bye");
    	}
    	finally
    	{
    		System.out.println("Bye");
    	}
    	
    	
    	int num=0;
    	//BufferedReader br=null;
    	try(BufferedReader br=new BufferedReader(new InputStreamReader(System.in)))
    	{
//    		InputStreamReader in =new InputStreamReader(System.in);
//    		BufferedReader br=new BufferedReader(in);
    		num=Integer.parseInt(br.readLine());
    		System.out.println(num);
    	}
    	finally
    	{
    		//br.close();
    	}
    }
    
}

--------------------------------------------------------------------------------------------------------------------------
for each

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
import java.util.function.Consumer;

public class Demo {
    public static void main(String[] args){   
    	
    	List<Integer> nums= Arrays.asList(4,5,7,3,2,6);
    	
//    	Consumer<Integer> con=new Consumer<Integer>() {
//    		
//    		public void accept(Integer n)
//    		{
//    			System.out.println(n);
//    		}
//    	};
    	
    	Consumer<Integer> con= n -> System.out.println(n);
 
    	nums.forEach(n -> System.out.println(n));
   
 //  	nums.forEach(null);
 //   	nums.forEach(con);
    	
    	
    	//nums.forEach(n -> System.out.println(n));
    	
    }
}
--------------------------------------------------------------------------------------------------------------------------



















































